{"version":3,"sources":["components/PetForm.js","components/PetList.js","components/PetDetail.js","components/PetUpdate.js","views/Main.js","App.js","serviceWorker.js","index.js"],"names":["props","useState","name","setName","type","setType","description","setDescription","skill1","setSkill1","skill2","setSkill2","skill3","setSkill3","errors","setErrors","to","onSubmit","e","preventDefault","axios","post","then","res","data","console","log","navigate","catch","err","placeholder","value","onChange","target","message","animals","setAnimals","useEffect","get","className","map","pet","key","_id","setPet","id","onClick","petId","delete","put","PetForm","path","onSubmitProp","initialName","initialType","initialDescription","initialSkill1","initialSkill2","initialSkill3","PetList","PetDetail","PetUpdate","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4fbc540.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default props => {\n    const [ name, setName ] = useState(\"\");\n    const [ type, setType ] = useState(\"\");\n    const [ description, setDescription ] = useState(\"\");\n    const [ skill1, setSkill1 ] = useState(\"\");\n    const [ skill2, setSkill2 ] = useState(\"\");\n    const [ skill3, setSkill3 ] = useState(\"\");\n    const [ errors, setErrors ] = useState({});\n\n    const submitHandler = e => {\n        e.preventDefault();\n        axios.post('http://localhost:8000/api/pet', {\n            name,\n            type,\n            description,\n            skill1,\n            skill2,\n            skill3,\n        })\n        .then (res => {\n            if (res.data.errors) {\n                setErrors(res.data.errors);\n            }\n            else {\n                console.log(res);\n                navigate('/pets')\n            }\n        })\n        .catch (err => console.log(err))\n    }\n\n    return (\n        <div>\n            <h1> Pet Shelter </h1>\n            <h2> Know of a pet needing a home? </h2>\n            <Link to = '/pets'> Home </Link>\n            <form onSubmit = { submitHandler }>\n                <p>\n                    <h5> Pet Name : </h5>\n                    <input type = \"text\" placeholder = \"name\" value = {name} onChange = { (e) => setName(e.target.value)} />\n                    <span> { errors.name ? errors.name.message : \"\" } </span>\n                </p>\n                <p>\n                    <h5> Pet Type : </h5>\n                    <input type = \"text\" placeholder = \"type\" value = {type} onChange = { (e) => setType(e.target.value) } />\n                    <span> { errors.type ? errors.type.message : \"\" } </span>\n                </p>\n                <p>\n                    <h5> Pet Description : </h5>\n                    <input type = \"text\" placeholder = \"description\" value = {description} onChange = { (e) => setDescription(e.target.value) } />\n                    <span> { errors.description ? errors.description.message : \"\" } </span>\n                </p>\n                <p>\n                    <h5> Skills : </h5>\n                </p>\n                    <p> Skill 1 : </p>\n                    <input type = 'text' placeholder = 'skill 1' value = {skill1} onChange = { (e) => setSkill1(e.target.value) } />\n                \n                    <p> Skill 2 : </p>\n                    <input type = 'text' placeholder = 'skill 2' value = {skill2} onChange = { (e) => setSkill2(e.target.value) } />\n                \n                    <p> Skill 3 : </p>\n                    <input type = 'text' placeholder = 'skill 3' value = {skill3} onChange = { (e) => setSkill3(e.target.value) } />\n                    <p />    \n                <p>\n                    <input type = 'submit' value = 'Add Pet'/> | <Link to = '/pets'><input type = 'submit' value = 'Cancel' /></Link>\n                </p>\n            </form>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport '../App.css';\nimport { Link } from '@reach/router';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default props => {\n    const [ animals, setAnimals ] = useState([]);\n    useEffect(() => {\n        axios.get('http://localhost:8000/api/pet')\n            .then(res => setAnimals(res.data));\n    }, [])\n\n    return(\n        <div>\n            <h1> Pet Shelter </h1>\n            <h2> These pets are looking for a home! </h2>\n            <p />\n            <Link to = '/pets/new'> Add a pet to the Shelter </Link>\n            <p />\n            <br />\n            <center>\n                <div className = 'table table-striped'>\n                    <table>\n                        <tbody>\n                            <tr>\n                                <th> Name </th>\n                                <th> Type </th>\n                                <th> <center> Actions </center> </th>\n                            </tr>\n                            {animals.map( pet => \n                            <tr key = {pet._id}>\n                                <td>{pet.name}</td>\n                                <td>{pet.type}</td>\n                                <td> <Link to = {\"/pets/\" + pet._id}> <input type = 'submit' value = 'Details' /></Link> <span> | </span> <Link to = {\"/pets/\" + pet._id + '/edit'}><input type = 'submit' value = 'Edit' /></Link> </td>\n                            </tr>\n                            )}   \n                        </tbody>\n                    </table>\n                </div>   \n            </center>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n\n\n\nexport default props => {\n    const [ pet, setPet ] = useState ({})\n\n    useEffect(() => {\n        axios.get(\"http://localhost:8000/api/pet/\" + props.id)\n            .then(res => setPet({\n                ...res.data\n            }))\n    }, [])\n\n    const deletePet = (petId) => {\n        axios.delete('http://localhost:8000/api/pet/' + petId)\n            .then(res => {\n                navigate(\"/pets\")\n            })\n    }\n\n    // const likePet = (petId) => {\n    //     axios.like\n    // }\n\n    return(\n        <div>\n            <h1> Pet Shelter </h1>\n            <h4> Details about {pet.name} </h4>\n            <Link to = '/pets'> Home </Link>\n            <hr />\n            <p />\n            <p> Pet Type : {pet.type} </p>\n            <p />\n            <p> Description : {pet.description} </p>\n            <p />\n            <ul>\n                <p> Skills: </p>\n                <p> {pet.skill1} </p>\n                <p> {pet.skill2} </p>\n                <p> {pet.skill3} </p>   \n            </ul>\n            <br />\n            <button onClick = { (e) => { deletePet(pet._id) } }> Adopt this pet! </button>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n\n\nexport default props => {\n    const { id } = props;\n    const [ name, setName ] = useState();\n    const [ type, setType ] = useState();\n    const [ description, setDescription ] = useState();\n    const [ skill1, setSkill1 ] = useState();\n    const [ skill2, setSkill2 ] = useState();\n    const [ skill3, setSkill3 ] = useState();\n\n    useEffect(() => {\n        axios.get('http://localhost:8000/api/pet/' + id)\n        .then(res => {\n            setName(res.data.name);\n            setType(res.data.type);\n            setDescription(res.data.description);\n            setSkill1(res.data.skill1);\n            setSkill2(res.data.skill2);\n            setSkill3(res.data.skill3);\n        })\n        }, [])\n\n        const [errors, setErrors] = useState({});\n        const updatePet = e => {\n            e.preventDefault();\n            axios.put('http://localhost:8000/api/pet/' + id, {\n                name,\n                type,\n                description,\n                skill1,\n                skill2,\n                skill3\n            })\n            .then(res => {\n                if(res.data.errors) {\n                    setErrors(res.data.errors);\n                }\n                else {\n                console.log(res);\n                navigate('/pets')\n                }\n                })\n        }\n\n\n    return (\n        <div>\n            <h1> Pet Shelter </h1>\n            <h2> Edit this Pet </h2>\n            <br />\n            <hr />\n            <form onSubmit = { updatePet }>\n                <p>\n                    <h5> Pet Name : </h5>\n                    <p />\n                    <input type = 'text' placeholder = 'name' value = {name} onChange = { (e) => setName(e.target.value) } />\n                    <span> {errors.name ? errors.name.message: ''} </span>\n                </p>\n                <p>\n                    <h5> Pet Type : </h5>\n                    <p />\n                    <input type = 'text' placeholder = 'type' value = {type} onChange = { (e) => setType(e.target.value) } />\n                    <span>{errors.type ? errors.type.message: ''}</span>\n                </p>\n                <p>\n                    <h5> Description : </h5>\n                    <p />\n                    <input type = 'text' placeholder = 'description' value = {description} onChange = { (e) => setDescription(e.target.value) } />\n                    <span> {errors.description ? errors.description.message: ''} </span>\n                </p>\n                <p>\n                    <h5> Skills : </h5>\n                </p>\n                <p> Skill 1 : </p>\n                <input type = 'text' placeholder = 'skill 1' value = {skill1} onChange = { (e) => setSkill1(e.target.value) } />\n                <p> Skill 2 :</p>\n                <input type = 'text' placeholder = 'skill 2' value = {skill2} onChange = { (e) => setSkill2(e.target.value) } />\n                <p> Skill 3 : </p>\n                <input type = 'text' placeholder = 'skill 3' value = {skill3} onChange = { (e) => setSkill3(e.target.value) } />\n                <p />\n                <p>\n                <input type = 'submit' value='Edit Pet' /> | <Link to = '/pets'><input type = 'submit' value = 'Cancel' /></Link>\n                </p>\n            </form>\n    </div>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport { Router } from '@reach/router';\n\nimport PetForm from '../components/PetForm';\nimport PetList from '../components/PetList';\nimport PetDetail from '../components/PetDetail';\nimport PetUpdate from '../components/PetUpdate';\n\nexport default () => {\n    const [animals, setAnimals] = useState([]);\n\n    useEffect(() => {\n        axios.get('http://localhost:8000/api/pet')\n            .then(res => setAnimals(res.data))\n            .catch(err => console.log(\"Error: \", err))\n    }, [])\n\n    const createPet = pet => {\n        axios.post('http://localhost:8000/api/pet', pet)\n            .then(res => {\n                setAnimals([...animals, res.data]);\n            })\n            .catch(err => console.log(err))\n    }\n    return (\n        <div>\n            <Router>\n                <PetForm path = '/pets/new' onSubmitProp={createPet} \n                initialName=\"\" \n                initialType=\"\"\n                initialDescription=\"\"\n                initialSkill1=\"\"\n                initialSkill2=\"\"\n                initialSkill3=\"\"/>\n                <PetList path = '/pets' animals={animals} />\n                <PetDetail path = '/pets/:id' />\n                <PetUpdate path = '/pets/:id/edit'/>\n            </Router>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Main from './views/Main';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n      \t\t<Main />\n    \t</div>\n  \t);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}